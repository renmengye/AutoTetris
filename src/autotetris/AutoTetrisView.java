/*
 * Author: Mengye Ren
 * Application's main frame, control centre
 */
package autotetris;

import java.awt.Color;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;
import javax.swing.Timer;
import javax.swing.JDialog;
import javax.swing.JFrame;

public class AutoTetrisView extends FrameView implements ATCommon, KeyListener {

    public AutoTetrisView(SingleFrameApplication app) {
        super(app);
        initComponents();
        ResourceMap resourceMap = getResourceMap();
        JFrame mainFrame = getFrame();
        mainFrame.setTitle("Auto Tetris");
        mainFrame.setSize(WIDTH, HEIGHT);
        mainFrame.setLocation(200, 200);
        mainFrame.setResizable(false);
        menuBar.setVisible(false);
        board = new Board();
        tcanvas = new TCanvas(board);
        new_round = true;
        random = new Random();
        initCanvas();
        performer = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (new_round) {
                    int type = random.nextInt(7);
                    int orient = random.nextInt(O_NUM[type]);
                    piece = new Piece(PieceType.get(type), Orientation.get(orient));
                    if (board.check_done(piece)) {
                        tcanvas.setStatus(GameStatus.DEAD);
                        t.stop();
                    }
                } else if (board.check_done(piece)) {
                    new_round=true;
                    board.bindBoard(piece.getBoard());
                }

            }
        };
        t = new Timer(100, performer);
        t.start();
    }

    public void keyPressed(KeyEvent e) {
    }

    public void keyTyped(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                move = GameMove.LEFT;
                break;
            case KeyEvent.VK_RIGHT:
                move = GameMove.RIGHT;
                break;
            case KeyEvent.VK_DOWN:
                move = GameMove.DROP;
                break;
            case KeyEvent.VK_SHIFT:
                move = GameMove.CW;
                break;
            case KeyEvent.VK_ENTER:
                move = GameMove.DROP;
                break;
        }
        /*if (e.getKeyCode() == KeyEvent.VK_LEFT) {
        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
        } else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
        } else if (e.getKeyCode() == KeyEvent.VK_SHIFT) {
        }*/
    }

    public void keyReleased(KeyEvent e) {
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = AutoTetrisApp.getApplication().getMainFrame();
            aboutBox = new AutoTetrisAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        //AutoTetrisApp.getApplication().show(aboutBox);
    }

    public void initCanvas() {
        tcanvas.setSize(WIDTH, HEIGHT);
        tcanvas.setBackground(Color.WHITE);
        mainPanel.add(tcanvas);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(202, 382));

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 307, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 391, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(autotetris.AutoTetrisApp.class).getContext().getResourceMap(AutoTetrisView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(autotetris.AutoTetrisApp.class).getContext().getActionMap(AutoTetrisView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables
    private JDialog aboutBox;
    private TCanvas tcanvas;
    private Board board;
    private Timer t;
    private GameMove move;
    private Piece piece;
    private boolean new_round;
    private Random random;
    private ActionListener performer;
}
